/* Generated by gether */

#ifndef CMARKERLINESYMBOL_H
#define CMARKERLINESYMBOL_H
#include "AdvLineSymbol.h"
#include "SimpleMarkerSymbol.h"
#include "CDC.h"
#include "IArchive.h"

namespace Display{
class DISPLAY_DLL CMarkerLineSymbol : public CAdvLineSymbol 
{
friend class Display::IMarkerSymbol;
public:
	CMarkerLineSymbol();

	virtual ~CMarkerLineSymbol();

	CMarkerLineSymbol(const CMarkerLineSymbol& MarkLineSymbol);

	CMarkerLineSymbol& operator = (const CMarkerLineSymbol& MarkLineSymbol);
	/////子类实例化须实现方法
	virtual void Draw(void* pObject);				//实现绘制

	virtual SYMBOL_TYPE GetType();					//得到类类型

	virtual void Zoom(float rate);

	virtual void ClearDC();

	/////类自身方法
    void SetMarkerSymbol(IMarkerSymbolPtr pSym);

	IMarkerSymbolPtr GetMarkerSymbol();

	virtual void SelectDC(Display::CDC * pDC);

	virtual void SetReadyDraw();

	virtual void SetLineColor(unsigned long lColor);

	virtual void SetLineWidth(float nWidth);

	virtual void SetProperties(const char* PropertyName,const _variant_t& PropertyValue);

	virtual _variant_t GetProperties(const char* PropertyName);

protected:
	void DrawArrow(void* pObject);
	virtual void OnUnitChanged(SYSTEM::SYS_UNIT_TYPE oldUnit , SYSTEM::SYS_UNIT_TYPE newUnit);
	virtual void OnChangingInSelectDC();
private:
    IMarkerSymbolPtr m_pMarkSymbol;

	long m_lOffsetLineCount;							//返回的偏移线的点个数，内部调用

	long *pMarkGroup;									//返回的偏移线的点数组，内部调用

	double *pMarkAngle;									//返回偏移线点的角度，内部调用

public:

    virtual void serialization(SYSTEM::IArchive & ar);

};

typedef SYSTEM::CSmartPtr<CMarkerLineSymbol> IMarkerLineSymbolPtr;
}
#endif //CMarkerLineSymbol_H
