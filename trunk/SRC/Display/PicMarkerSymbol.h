/* Generated by gether */
#ifndef CBITMAPSYMBOL_H
#define CBITMAPSYMBOL_H
#include "DisplayHeader.h"
#include "IMarkerSymbol.h"
#include "CDC.h"
#include "IArchive.h"

namespace Display{
class DISPLAY_DLL CPicMarkerSymbol : public IMarkerSymbol 
{
public:
	CPicMarkerSymbol();

	CPicMarkerSymbol(const CPicMarkerSymbol& PicMarkSymbol);
	//拷贝构造函数

	CPicMarkerSymbol& operator = (const CPicMarkerSymbol& PicMarkSymbol);
	//重载=

	~CPicMarkerSymbol();

	SYMBOL_TYPE GetType();		
	//得到符号类型

	virtual void Zoom(float rate);

	void SetReverseColor(bool bReverseColor);
	//反转颜色//二值时可使用

	bool GetReverseColor();

    //设置位图路径
	void SetFileName(std::string cFilename);

    //得到位图路径
	std::string GetFileName() const {return m_cPicPath;}
	

	virtual void Draw(void* pObject);
	//绘制函数

	void SetBGColor(unsigned long nBGcolor);


	void SetTransparecyColor(unsigned long nTransparecyColor);


	unsigned long GetBGColor();


	unsigned long GetTransparecyColor();


	void SetPicConvertBits(int nPicBits);


	int GetPicConvertBits();

	 void * GetPalColor();

	void SetScale(float Scale);		
	//设置符号比例

	float GetScale();				
	//得到符号横向长度	

	virtual void ClearDC();
public:

	virtual void SetProperties(const char* PropertyName , const _variant_t& PropertyValue );

	virtual _variant_t GetProperties(const char* PropertyName );			
	//得到当前符号的属性配置

    virtual void SelectDC(Display::CDC * pDC);

    virtual void SetReadyDraw();

    virtual void serialization(SYSTEM::IArchive & ar);
protected:
	virtual void OnUnitChanged(SYSTEM::SYS_UNIT_TYPE oldUnit , SYSTEM::SYS_UNIT_TYPE newUnit);
	virtual void OnChangingInSelectDC();
private:
	unsigned long m_lBackGroundColor,m_lTransparecyColor;//背景色，透明色
	long m_nSrcW;											//2 图像原始宽度
	long m_nSrcH;											//1图像原始高度  
	bool m_bReverseColor;									//是否反转颜色
	bool m_bPng;											//是png吗
	Display::CDC  m_MemDC;								//内存DC
	long m_lInsideReviseX;									//内部x方向校正,使传入的绘制点为符号的中心点
	long m_lInsideReviseY;									//内部Y方向校正,使传入的绘制点为符号的中心点
	float m_fScale;											//储存长宽比例
	unsigned long m_lDestW,m_lDestH;						//目标宽度，高度
	void * m_bitmapData;									//图像数据
	int m_bitmapDataLens;									//图像数据长度
	int m_bpp;                                              //图像位深度
	bool m_bSetFileName;
	std::string	m_cPicPath;							//储存图片路径
};

typedef SYSTEM::CSmartPtr<CPicMarkerSymbol> CPicMarkerSymbolPtr;
}

#endif //CBITMAPSYMBOL_H
