/************************************************************************/
/* Generated by Together */
/*作者：zhm
描述：渐变色填充符号类
版本号：1.0
创建日期：2010-9-3                                                                  */
/************************************************************************/

#pragma once

#include "IFillSymbol.h"
#include "DisplayCache.h"
#include "CDC.h"
#include "IArchive.h"

namespace Display{
class DISPLAY_DLL CGradientFillSymbol :	public IFillSymbol
{
public:
	CGradientFillSymbol(void);

	CGradientFillSymbol(const CGradientFillSymbol& toGradientFillSymbol);

	CGradientFillSymbol& operator = (const CGradientFillSymbol& toGradientFillSymbol);

	~CGradientFillSymbol();

	// 函数名称   : Draw(void* pObject)
	// 描述       : 实现绘制
	// 返回类型   : virtual void 
	// 参数       : void* pObject
	virtual void Draw(void* pObject);	

	// 函数名称   : GetType()
	// 描述       : 得到类类型
	// 返回类型   : virtual SYMBOL_TYPE 
	virtual SYMBOL_TYPE GetType();

	// 函数名称   : SelectDC(CDC *pDC)
	// 描述       : 配置笔，刷，字体等
	// 返回类型   : virtual void 
	// 参数       : CDC *pDC   绘制句柄 
	virtual void SelectDC(Display::CDC * pDC);

	// 函数名称   : SetReadyDraw()
	// 描述       : 将selectDC创建所需的绘制句柄装入当前画布，完成绘制前的准备工作
	// 返回类型   : virtual void 
	virtual void SetReadyDraw();

	// 函数名称   : ClearDC()
	// 描述       : 清除画布
	// 返回类型   : virtual void 
	virtual void ClearDC();

	// 函数名称   : Zoom(float rate)
	// 描述       : 根据比例进行符号缩放
	// 返回类型   : virtual void 
	// 参数       : float rate
	virtual void Zoom(float rate);

	//设置当前符号的属性设置
	virtual void SetProperties(const char* PropertyName,const _variant_t& PropertyValue);

	//得到当前符号的属性配置
	virtual _variant_t GetProperties( const char* PropertyName );	

	/*---------------属性访问接口--------------------*/
	void SetBeginColor( COLORREF color);

	COLORREF GetBeginColor( void );

	void SetEndColor( COLORREF color );

	COLORREF GetEndColor( void ); 

	void SetGradientFillType( GRANDIENT_FILL_TYPE gradientType );

	GRANDIENT_FILL_TYPE GetGradientFillType( void );

	void SetSegmentsCount( long nCount );

	long GetSegmentsCount( void );

	void SetPercent( long nPercent );

	long GetPercent( void );

	void SetAngle( float fAngle );

	float GetAngle( void );
	/*-----------------------------------------------*/

protected:
	virtual void OnUnitChanged(SYSTEM::SYS_UNIT_TYPE oldUnit , SYSTEM::SYS_UNIT_TYPE newUnit);

	virtual void OnChangingInSelectDC();

private:
	//建立渐变色数组
	void CreateColorRamp( std::vector<COLORREF> &vecColorRamp );

	//绘制渐变色的子部分
	void DrawGradientSubparts ( GRANDIENT_FILL_TYPE type, const std::vector<COLORREF> &vecColorRamp, DIS_POINT &pCenter, DIS_RECT &rect, int lsize);

protected:

	GRANDIENT_FILL_TYPE m_typeGradientFill; //渐变类型 

	COLORREF m_lBeginColor;	//渐变起始色

	COLORREF m_lEndColor;   //渐变终止色

	long m_nSegmentsNum;    //渐变分块数目

	long m_nPercentage;      //渐变色所占比例

	float m_nAngle;			//线性渐变色的变化角度

public:

	virtual void serialization(SYSTEM::IArchive & ar);
};

typedef SYSTEM::CSmartPtr<CGradientFillSymbol> CGradientFillSymbolPtr;
}


