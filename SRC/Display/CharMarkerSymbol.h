/* Generated by Together */

#ifndef CCHARMARKERSYMBOL_H
#define CCHARMARKERSYMBOL_H

#include "IMarkerSymbol.h"
#include "CDC.h"
#include "String.h"
#include "IArchive.h"
#include "DisplayCache.h"
namespace Display{

class DISPLAY_DLL CCharMarkerSymbol : public IMarkerSymbol
{

public:
	CCharMarkerSymbol();
	//定义拷贝构造函数
	CCharMarkerSymbol(const CCharMarkerSymbol& toCharMarkerSymbol);
	
	//重载"="
	CCharMarkerSymbol& operator = (const CCharMarkerSymbol& toCharMarkerSymbol);
	
	virtual ~CCharMarkerSymbol();

	virtual void ClearDC();

	virtual void SetProperties(const char* PropertyName , const _variant_t& PropertyValue);

	virtual _variant_t GetProperties(const char* PropertyName);			//得到当前符号的属性配置返回引用.如果没有此属性返回0.

public:
	/////子类实例化实现
	virtual void Draw(void* pObject);				//实现绘制
	
	SYMBOL_TYPE GetType();							//得到类类型

	virtual void Zoom(float rate);

	//类自身方法，可继承给子类，可被子类覆盖

	void SetCharMap(const wchar_t wMarker);			//设置要实现的宽字符集的映射码

	wchar_t* GetCharMap();							//得到映射码

	void SetFaceName(const char *name);				//设置字体名称

	char* GetFaceName();							//得到字体名称

	void SetCharSet(byte charSet);					//设置字符集名称

	unsigned char GetCharSet();						//得到字符集名称

	void SetCharWidth(float width);
	float GetCharWidth();

private:
	DISPLAY_HANDLE SetFont();									//设置字体，自身调用
public:

    virtual void SelectDC(CDC * pDC);

    virtual void SetReadyDraw();

protected:
	virtual void OnUnitChanged(SYSTEM::SYS_UNIT_TYPE oldUnit , SYSTEM::SYS_UNIT_TYPE newUnit);
	virtual void OnChangingInSelectDC();
private:

	std::string m_cpFaceName;								//字体名称

	unsigned char m_btCharSet;						//字符集名称,默认为当前系统默认字符集

	wchar_t m_wcMarker;								//存放转化前传入的宽字符映射码

	float m_fCharWidth;

	//////////////////////////////////////////////////////////////////////////
	DISPLAY_HANDLE_NODE* m_hFontHandle;								//存储字体缓存
	//////////////////////////////////////////////////////////////////////////

	long m_lInsideReviseX;							//内部x方向校正,使传入的绘制点为符号的中心点

	long m_lInsideReviseY;							//内部Y方向校正,使传入的绘制点为符号的中心点

	bool m_bCharMapChange;

	long m_lCharWidth;

public:

    virtual void serialization(SYSTEM::IArchive & ar);
};

typedef SYSTEM::CSmartPtr<CCharMarkerSymbol> CCharMarkerSymbolPtr;
}
#endif //CCHARMARKERSYMBOL_H
