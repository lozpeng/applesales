/* Generated by Together */

#ifndef CUNIQUERENDER_H
#define CUNIQUERENDER_H

#include "ISymbol.h"

namespace Carto
{
	typedef struct SymbolArray
	{
		Display::ISymbolPtr pSymbol;
		long nIndex;
		std::string strLabel;
		SymbolArray()
		{
			pSymbol.reset();
			nIndex = 0;
		}
	}SYMBOLARRAY;
	typedef std::map< std::string ,Carto::SymbolArray > MapStr;
	typedef std::map <  std::string ,Carto::SymbolArray >::iterator  Str_Iterator;

class CARTO_DLL CUniqueRender : public Carto::IRender 
{
public:
	
	CUniqueRender();

	~CUniqueRender();

public:
	virtual void Draw( Display::IDisplayPtr pDisplay,  Geodatabase::ICursorPtr pCursor );

	virtual void HighLightDraw( Display::IDisplayPtr pDisplay, Geodatabase::ICursorPtr pCursor  );

	virtual void HighLightDraw(Display::IDisplayPtr pDisplay,  Geodatabase::ISelctionSet* pSelections);

	virtual std::string GetRendFieldsStr();

	virtual void SetUniqueFieldsStr(std::string RendFields , std::string AliasName = "" );

	bool EraseUniqueValueSymbol(std::string Value);

	bool SetDefaultSymbol( Display::ISymbolPtr pSymbol );

	Display::ISymbolPtr GetDefaultSymbol(void);

	void SetUniqueValue( std::string Value, std::string strLabel,Display::ISymbolPtr pSymbol);

	Display::ISymbolPtr GetUniqueValue( std::string Value  );

	void GetSymbolAndValueArray( std::vector< std::string > & arrayStrValue , std::vector< Display::ISymbolPtr> & arraySymbol );

	long GetCount();

	/**
	* 设置默认符号的标注
	* @param strLable 标注
	*/
	void SetDefaultLabel(std::string strLable);

	/**
	* 得到默认符号的标注
	* @return std::string 标注
	*/
	std::string GetDefaultLabel();

	/**
	* 得到某个属性值的标注
	* @return std::string 标注
	*/
	std::string GetLabel(std::string value);

	/**
	* 设置图例的头文字
	* @param strLable 标注
	*/
	void SetHeading(std::string strHeading);

	/**
	* 得到图例的头文字
	* @return std::string 标注
	*/
	std::string GetHeading();

	/**
	* 得到指定序号的字段值
	* @return std::string 标注
	*/
	std::string GetValue(long index);

	virtual CLegendInfoPtr GetLegendInfo();

	virtual void serialization(SYSTEM::IArchive &ar);

	void clear(void);
protected:
	std::string m_RendFieldsStr,m_AliasName;
	std::string m_strHeading;
	std::string m_DefaultLabel; //默认符号的标注
	MapStr m_UniqueStrSyms;
	int m_nLens;
	Display::ISymbolPtr m_pDefaultSymbol;

	std::vector<std::string>  m_indexList;
};

typedef SYSTEM::CSmartPtr<CUniqueRender> IUniqueRenderPtr;
}
#endif //CUNIQUERENDER_H
