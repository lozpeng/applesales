/* Generated by Together */
#include "stdafx.h"
#include "LayerArray.h"
//#include "ILayer.h"
namespace Carto{
	Carto::CLayerArray::CLayerArray(){}
	Carto::CLayerArray::~CLayerArray(){}

	int Carto::CLayerArray::ChangeOrder(int From, int To)
	{
		if(From ==To)
		{
			return TRUE;
		}
		long lsize =GetSize();
		if(From<0 || From>=lsize)
		{
			return FALSE;
		}
		if(To<0 || To>=lsize)
		{
			return FALSE;
		}

		Carto::ILayerPtr pLayer =ElementAt(From);

		RemoveAt(From);        
		InsertAt(To, pLayer);

		return TRUE;
	}

	int Carto::CLayerArray::MoveToTop(int FromPos)
	{
		return 0;
	}

	void Carto::CLayerArray::serialization(SYSTEM::IArchive &ar)
	{
		if( ar.IsRead() )
		{
			long Size;
			ar & Size;
			for (long i = 0 ; i < Size ; i++ )
			{
				ILayerPtr player = ILayer::CreateLayerFromStream( ar );
				if( player != NULL )
					Add( player );
			}
		}
		else
		{
			long Size = GetSize();
			ar & Size;
			for (long i = 0 ; i < Size ; i++ )
			{
				ILayerPtr player = GetAt(i);
				player->serialization( ar );
			}

		}
	}


	long Carto::CLayerArray::FindIndex(Carto::ILayerPtr ptrLayer)
	{
		if (ptrLayer == NULL )
		{
			return -1; //ERROR
		}
		long lSize = this->GetSize();
		for (long i = 0; i < lSize; i++)
		{
			Carto::ILayerPtr tempLayer = this->GetAt(i);
			if (tempLayer == ptrLayer)
			{
				return i;
			}
		}
		return -1;
	}

	Carto::CLayerArray& Carto::CLayerArray::operator =(const CLayerArray& la)
	{
		Copy( *(SYSTEM::CArray<ILayerPtr>*)(&la) );
		return *this;
	}
}