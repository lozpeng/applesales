/* Generated by Together */
#include "stdafx.h"
#include "Configer.h"
#include "ConfigItem.h"
//#include "SysLog.h"
#include "Exception.h"
#include "SysPath.h"
#include "xmlstring.h"
#include <boost/format.hpp>
#include <boost/filesystem/operations.hpp>
#include <boost/filesystem/path.hpp>
#include <boost/iostreams/device/file.hpp>
#include <boost/iostreams/stream.hpp>

using namespace CAT3_RAW_NUMERIC_SEP_UNDERSCORE(xercesc,3,0);

static SYSTEM::IConfigerPtr ptrConfiger;

SYSTEM::CConfiger::CConfiger()
{
}

void SYSTEM::CConfiger::Initialize(std::string identity)
{
	ptrConfiger.reset(new CConfiger);
	ptrConfiger->Open(CSystemPath::GetSystemPath()+identity + ".xml");
}

SYSTEM::IConfigItemPtr SYSTEM::CConfiger::GetConfigerRoot()	
{
	return ptrConfiger;
}

void SYSTEM::CConfiger::Terminate()	
{
	ptrConfiger.reset();
}

SYSTEM::CXMLConfiguration::CXMLConfiguration()
{	
	impl = NULL;
    parser = NULL;
}

SYSTEM::CXMLConfiguration::~CXMLConfiguration()
{
	Close();
}

void SYSTEM::CXMLConfiguration::Initialize()
{
	XMLPlatformUtils::Initialize();
}

void SYSTEM::CXMLConfiguration::Uninitialize()
{
	XMLPlatformUtils::Terminate();
}

void SYSTEM::CXMLConfiguration::Create(std::string  xmlpath , std::string  charCode , std::string rootNodeName)
{
	if(xmlpath.empty())
		throw CException("The file name is empty.");
	
	FILE *pFile = fopen(xmlpath.c_str(),"w");
	if(pFile == NULL)
		return;
		//throw CException(boost::str(boost::format(GET_TEXT(ERR_CREATE_FILE)) % xmlpath));
	
	std::string strContent = boost::str(boost::format("<?xml version=\"1.0\" encoding=\"%s\" standalone=\"no\" ?><%s></%s>")% charCode % rootNodeName % rootNodeName);
	fwrite(strContent.c_str(),sizeof(char),strContent.length(), pFile);
	fclose(pFile);

	Open(xmlpath);
}

bool SYSTEM::CXMLConfiguration::Open(std::string xmlpath)
{
	// 配置解析规则
	static const XMLCh gLS[] = { chLatin_L, chLatin_S, chNull };
	impl = DOMImplementationRegistry::getDOMImplementation(gLS);
	if(!impl)
		return false;
//		throw CException(GET_TEXT(ERR_XML_DOM_IMPLEMENTATION));
	if(parser == NULL)
		parser = new XercesDOMParser;
	XercesDOMParser* xmlparser = (XercesDOMParser*)parser;
	xmlparser->setValidationScheme(XercesDOMParser::Val_Never);
	xmlparser->setDoNamespaces(false);
	xmlparser->setDoSchema(false);
	xmlparser->setValidationSchemaFullChecking(false);
	xmlparser->setCreateEntityReferenceNodes(false);
	xmlparser->setIncludeIgnorableWhitespace(false);

	xmlparser->resetDocumentPool();	//重置文档缓冲池
	xmlparser->parse(xmlpath.c_str());
	doc = xmlparser->getDocument();
	if(doc) 
		itemElement = ((XERCES_CPP_NAMESPACE_QUALIFIER DOMDocument*)doc)->getDocumentElement();	//赋予根节点
	else
		return false;
		//throw CException(boost::str(boost::format(GET_TEXT(ERR_PARSE_CONFIG_FILE)) % xmlpath));

	xmlFile = xmlpath;
	return true;
}

void SYSTEM::CXMLConfiguration::Parse(std::string xmlcontent)
{
	// 配置解析规则
	static const XMLCh gLS[] = { chLatin_L, chLatin_S, chNull };
	impl = DOMImplementationRegistry::getDOMImplementation(gLS);
	if(!impl)
		return;
//		throw CException(GET_TEXT(ERR_XML_DOM_IMPLEMENTATION));
	if(parser == NULL)
		parser = new XercesDOMParser;

	XercesDOMParser* xmlparser = (XercesDOMParser*)parser;

	xmlparser->setValidationScheme(XercesDOMParser::Val_Never);
	xmlparser->setLoadExternalDTD(false);

	xmlparser->setDoNamespaces(false);
	xmlparser->setDoSchema(false);
	xmlparser->setValidationSchemaFullChecking(false);
	xmlparser->setCreateEntityReferenceNodes(false);
	xmlparser->setIncludeIgnorableWhitespace(false);

	xmlparser->resetDocumentPool();	//重置文档缓冲池

	MemBufInputSource input((XMLByte*) xmlcontent.c_str(), xmlcontent.size(), "memory");
	xmlparser->parse(input);	
	doc = xmlparser->getDocument();
	if(doc) 
		itemElement = ((XERCES_CPP_NAMESPACE_QUALIFIER DOMDocument*)doc)->getDocumentElement();	//赋予根节点
	else
		return;
//		throw CException(boost::str(boost::format(GET_TEXT(ERR_PARSE_CONFIG_FILE)) % xmlcontent));

}

void SYSTEM::CXMLConfiguration::Close()
{
	if(m_curValue != NULL )
	{
		XMLString::release(&m_curValue);
		m_curValue = NULL;
	}
	delete ((XercesDOMParser*)parser);
	parser = NULL;
}

void SYSTEM::CXMLConfiguration::Save()
{
	DOMLSSerializer *ss = ((DOMImplementationLS*)impl)->createLSSerializer();
	if(xmlFile.length() == 0)
	{
		//InfoLog("Cann't save file. The file name is null");
		return;
	}
	XMLCh *t = XMLString::transcode(xmlFile.c_str());
	ss->writeToURI((XERCES_CPP_NAMESPACE_QUALIFIER DOMDocument*)doc,t);
	XMLString::release(&m_curValue);
}